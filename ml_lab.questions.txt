Nathanial Tranel
CSCI 305
Spring 2018
Lab Questions
=======================
1. The output I get when running f [3, 1, 4, 1, 5, 9] is [4, 2, 5, 2, 6, 10].

2. The function f appears to add 1 to all of the numbers in the input list, so the list that
is returned is the same list with all the values increased by 1.

3. Line (a) is the base case line - if the input list is empty, return an empty list.

4. Line (b) is the recursive line - given an input list, take the head and add 1. The tail of
the list is sent through the function f again, and the result is cons-ed to the head plus 1 value.

5. false

6. Tail recursion; it compares the head of the set to e and sends the tail through the function again. ??? - research

7. Set ("it", Set ("was", Set ("the", Set ("best", Set ("of", Set ("times", Set ("worst", Empty)))))))

8.

9.

10.

11. I like how functions can be written in a "tricky" way using recursion - it feels like the most elegant way to do things,
as if each function is being written in one line (and it sort of is, in a sense). Though it requires some difficult thought
sometimes, it is a cool way of doing things.

12. That being said, while it is cool, I do not like the structure that the programs must follow. The recursive nature of 
functions require that steps all be thought out/written down and then implemented elegant code, whereas more familiar 
languages like Java allow the coder to write one line of code per thought, as the language requires it. ML definitely
requires a new way of thinking about programming.

13. 

14. I probably spent around 12-15 hours total trying to figure out how to do each of the things and experimenting in the
PolyML shell to get the correct syntax.

15.
